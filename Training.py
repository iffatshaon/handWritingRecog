# -*- coding: utf-8 -*-
"""tamim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K1aZCzll0ZpH525cwTGdSxhMJv8icyzy
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow import keras
import numpy as np
import os
import zipfile
import random
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from shutil import copyfile
from google.colab import files

local_zip = '/content/drive/My Drive/English.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp/train')
zip_ref.close()

try:
    os.mkdir('/tmp/hndwrt')
    os.mkdir('/tmp/hndwrt/training')
    os.mkdir('/tmp/hndwrt/testing')
    os.mkdir('/tmp/hndwrt/training/A')
    os.mkdir('/tmp/hndwrt/training/B')
    os.mkdir('/tmp/hndwrt/training/C')
    os.mkdir('/tmp/hndwrt/training/D')
    os.mkdir('/tmp/hndwrt/training/E')
    os.mkdir('/tmp/hndwrt/training/F')
    os.mkdir('/tmp/hndwrt/training/G')
    os.mkdir('/tmp/hndwrt/training/H')
    os.mkdir('/tmp/hndwrt/training/I')
    os.mkdir('/tmp/hndwrt/training/J')
    os.mkdir('/tmp/hndwrt/training/K')
    os.mkdir('/tmp/hndwrt/training/L')
    os.mkdir('/tmp/hndwrt/training/M')
    os.mkdir('/tmp/hndwrt/training/N')
    os.mkdir('/tmp/hndwrt/training/O')
    os.mkdir('/tmp/hndwrt/training/P')
    os.mkdir('/tmp/hndwrt/training/Q')
    os.mkdir('/tmp/hndwrt/training/R')
    os.mkdir('/tmp/hndwrt/training/S')
    os.mkdir('/tmp/hndwrt/training/T')
    os.mkdir('/tmp/hndwrt/training/U')
    os.mkdir('/tmp/hndwrt/training/V')
    os.mkdir('/tmp/hndwrt/training/W')
    os.mkdir('/tmp/hndwrt/training/X')
    os.mkdir('/tmp/hndwrt/training/Y')
    os.mkdir('/tmp/hndwrt/training/Z')
    os.mkdir('/tmp/hndwrt/training/a')
    os.mkdir('/tmp/hndwrt/training/b')
    os.mkdir('/tmp/hndwrt/training/c')
    os.mkdir('/tmp/hndwrt/training/d')
    os.mkdir('/tmp/hndwrt/training/e')
    os.mkdir('/tmp/hndwrt/training/f')
    os.mkdir('/tmp/hndwrt/training/g')
    os.mkdir('/tmp/hndwrt/training/h')
    os.mkdir('/tmp/hndwrt/training/i')
    os.mkdir('/tmp/hndwrt/training/j')
    os.mkdir('/tmp/hndwrt/training/k')
    os.mkdir('/tmp/hndwrt/training/l')
    os.mkdir('/tmp/hndwrt/training/m')
    os.mkdir('/tmp/hndwrt/training/n')
    os.mkdir('/tmp/hndwrt/training/o')
    os.mkdir('/tmp/hndwrt/training/p')
    os.mkdir('/tmp/hndwrt/training/q')
    os.mkdir('/tmp/hndwrt/training/r')
    os.mkdir('/tmp/hndwrt/training/s')
    os.mkdir('/tmp/hndwrt/training/t')
    os.mkdir('/tmp/hndwrt/training/u')
    os.mkdir('/tmp/hndwrt/training/v')
    os.mkdir('/tmp/hndwrt/training/w')
    os.mkdir('/tmp/hndwrt/training/x')
    os.mkdir('/tmp/hndwrt/training/y')
    os.mkdir('/tmp/hndwrt/training/z')
    os.mkdir('/tmp/hndwrt/testing/A')
    os.mkdir('/tmp/hndwrt/testing/B')
    os.mkdir('/tmp/hndwrt/testing/C')
    os.mkdir('/tmp/hndwrt/testing/D')
    os.mkdir('/tmp/hndwrt/testing/E')
    os.mkdir('/tmp/hndwrt/testing/F')
    os.mkdir('/tmp/hndwrt/testing/G')
    os.mkdir('/tmp/hndwrt/testing/H')
    os.mkdir('/tmp/hndwrt/testing/I')
    os.mkdir('/tmp/hndwrt/testing/J')
    os.mkdir('/tmp/hndwrt/testing/K')
    os.mkdir('/tmp/hndwrt/testing/L')
    os.mkdir('/tmp/hndwrt/testing/M')
    os.mkdir('/tmp/hndwrt/testing/N')
    os.mkdir('/tmp/hndwrt/testing/O')
    os.mkdir('/tmp/hndwrt/testing/P')
    os.mkdir('/tmp/hndwrt/testing/Q')
    os.mkdir('/tmp/hndwrt/testing/R')
    os.mkdir('/tmp/hndwrt/testing/S')
    os.mkdir('/tmp/hndwrt/testing/T')
    os.mkdir('/tmp/hndwrt/testing/U')
    os.mkdir('/tmp/hndwrt/testing/V')
    os.mkdir('/tmp/hndwrt/testing/W')
    os.mkdir('/tmp/hndwrt/testing/X')
    os.mkdir('/tmp/hndwrt/testing/Y')
    os.mkdir('/tmp/hndwrt/testing/Z')
    os.mkdir('/tmp/hndwrt/testing/a')
    os.mkdir('/tmp/hndwrt/testing/b')
    os.mkdir('/tmp/hndwrt/testing/c')
    os.mkdir('/tmp/hndwrt/testing/d')
    os.mkdir('/tmp/hndwrt/testing/e')
    os.mkdir('/tmp/hndwrt/testing/f')
    os.mkdir('/tmp/hndwrt/testing/g')
    os.mkdir('/tmp/hndwrt/testing/h')
    os.mkdir('/tmp/hndwrt/testing/i')
    os.mkdir('/tmp/hndwrt/testing/j')
    os.mkdir('/tmp/hndwrt/testing/k')
    os.mkdir('/tmp/hndwrt/testing/l')
    os.mkdir('/tmp/hndwrt/testing/m')
    os.mkdir('/tmp/hndwrt/testing/n')
    os.mkdir('/tmp/hndwrt/testing/o')
    os.mkdir('/tmp/hndwrt/testing/p')
    os.mkdir('/tmp/hndwrt/testing/q')
    os.mkdir('/tmp/hndwrt/testing/r')
    os.mkdir('/tmp/hndwrt/testing/s')
    os.mkdir('/tmp/hndwrt/testing/t')
    os.mkdir('/tmp/hndwrt/testing/u')
    os.mkdir('/tmp/hndwrt/testing/v')
    os.mkdir('/tmp/hndwrt/testing/w')
    os.mkdir('/tmp/hndwrt/testing/x')
    os.mkdir('/tmp/hndwrt/testing/y')
    os.mkdir('/tmp/hndwrt/testing/z')
except OSError:
    pass

def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):
    files = []
    for filename in os.listdir(SOURCE):
        file = SOURCE + filename
        if os.path.getsize(file) > 0:
            files.append(filename)
        else:
            print(filename + " is zero length, so ignoring.")
    training_length = int(len(files) * SPLIT_SIZE)
    testing_length = int(len(files) - training_length)
    shuffled_set = random.sample(files, len(files))
    training_set = shuffled_set[0:training_length]
    testing_set = shuffled_set[-testing_length:]

    for filename in training_set:
        this_file = SOURCE + filename
        destination = TRAINING + filename
        copyfile(this_file, destination)

    for filename in testing_set:
        this_file = SOURCE + filename
        destination = TESTING + filename
        copyfile(this_file, destination)
A_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample011/"
TRAINING_A_DIR = "/tmp/hndwrt/training/A/"
TESTING_A_DIR = "/tmp/hndwrt/testing/A/"
B_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample012/"
TRAINING_B_DIR = "/tmp/hndwrt/training/B/"
TESTING_B_DIR = "/tmp/hndwrt/testing/B/"
C_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample013/"
TRAINING_C_DIR = "/tmp/hndwrt/training/C/"
TESTING_C_DIR = "/tmp/hndwrt/testing/C/"
D_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample014/"
TRAINING_D_DIR = "/tmp/hndwrt/training/D/"
TESTING_D_DIR = "/tmp/hndwrt/testing/D/"
E_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample015/"
TRAINING_E_DIR = "/tmp/hndwrt/training/E/"
TESTING_E_DIR = "/tmp/hndwrt/testing/E/"
F_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample016/"
TRAINING_F_DIR = "/tmp/hndwrt/training/F/"
TESTING_F_DIR = "/tmp/hndwrt/testing/F/"
G_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample017/"
TRAINING_G_DIR = "/tmp/hndwrt/training/G/"
TESTING_G_DIR = "/tmp/hndwrt/testing/G/"
H_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample018/"
TRAINING_H_DIR = "/tmp/hndwrt/training/H/"
TESTING_H_DIR = "/tmp/hndwrt/testing/H/"
I_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample019/"
TRAINING_I_DIR = "/tmp/hndwrt/training/I/"
TESTING_I_DIR = "/tmp/hndwrt/testing/I/"
J_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample020/"
TRAINING_J_DIR = "/tmp/hndwrt/training/J/"
TESTING_J_DIR = "/tmp/hndwrt/testing/J/"
K_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample021/"
TRAINING_K_DIR = "/tmp/hndwrt/training/K/"
TESTING_K_DIR = "/tmp/hndwrt/testing/K/"
L_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample022/"
TRAINING_L_DIR = "/tmp/hndwrt/training/L/"
TESTING_L_DIR = "/tmp/hndwrt/testing/L/"
M_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample023/"
TRAINING_M_DIR = "/tmp/hndwrt/training/M/"
TESTING_M_DIR = "/tmp/hndwrt/testing/M/"
N_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample024/"
TRAINING_N_DIR = "/tmp/hndwrt/training/N/"
TESTING_N_DIR = "/tmp/hndwrt/testing/N/"
O_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample025/"
TRAINING_O_DIR = "/tmp/hndwrt/training/O/"
TESTING_O_DIR = "/tmp/hndwrt/testing/O/"
P_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample026/"
TRAINING_P_DIR = "/tmp/hndwrt/training/P/"
TESTING_P_DIR = "/tmp/hndwrt/testing/P/"
Q_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample027/"
TRAINING_Q_DIR = "/tmp/hndwrt/training/Q/"
TESTING_Q_DIR = "/tmp/hndwrt/testing/Q/"
R_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample028/"
TRAINING_R_DIR = "/tmp/hndwrt/training/R/"
TESTING_R_DIR = "/tmp/hndwrt/testing/R/"
S_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample029/"
TRAINING_S_DIR = "/tmp/hndwrt/training/S/"
TESTING_S_DIR = "/tmp/hndwrt/testing/S/"
T_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample030/"
TRAINING_T_DIR = "/tmp/hndwrt/training/T/"
TESTING_T_DIR = "/tmp/hndwrt/testing/T/"
U_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample031/"
TRAINING_U_DIR = "/tmp/hndwrt/training/U/"
TESTING_U_DIR = "/tmp/hndwrt/testing/U/"
V_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample032/"
TRAINING_V_DIR = "/tmp/hndwrt/training/V/"
TESTING_V_DIR = "/tmp/hndwrt/testing/V/"
W_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample033/"
TRAINING_W_DIR = "/tmp/hndwrt/training/W/"
TESTING_W_DIR = "/tmp/hndwrt/testing/W/"
X_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample034/"
TRAINING_X_DIR = "/tmp/hndwrt/training/X/"
TESTING_X_DIR = "/tmp/hndwrt/testing/X/"
Y_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample035/"
TRAINING_Y_DIR = "/tmp/hndwrt/training/Y/"
TESTING_Y_DIR = "/tmp/hndwrt/testing/Y/"
Z_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample036/"
TRAINING_Z_DIR = "/tmp/hndwrt/training/Z/"
TESTING_Z_DIR = "/tmp/hndwrt/testing/Z/"
a_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample037/"
TRAINING_a_DIR = "/tmp/hndwrt/training/a/"
TESTING_a_DIR = "/tmp/hndwrt/testing/a/"
b_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample038/"
TRAINING_b_DIR = "/tmp/hndwrt/training/b/"
TESTING_b_DIR = "/tmp/hndwrt/testing/b/"
c_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample039/"
TRAINING_c_DIR = "/tmp/hndwrt/training/c/"
TESTING_c_DIR = "/tmp/hndwrt/testing/c/"
d_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample040/"
TRAINING_d_DIR = "/tmp/hndwrt/training/d/"
TESTING_d_DIR = "/tmp/hndwrt/testing/d/"
e_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample041/"
TRAINING_e_DIR = "/tmp/hndwrt/training/e/"
TESTING_e_DIR = "/tmp/hndwrt/testing/e/"
f_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample042/"
TRAINING_f_DIR = "/tmp/hndwrt/training/f/"
TESTING_f_DIR = "/tmp/hndwrt/testing/f/"
g_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample043/"
TRAINING_g_DIR = "/tmp/hndwrt/training/g/"
TESTING_g_DIR = "/tmp/hndwrt/testing/g/"
h_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample044/"
TRAINING_h_DIR = "/tmp/hndwrt/training/h/"
TESTING_h_DIR = "/tmp/hndwrt/testing/h/"
i_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample045/"
TRAINING_i_DIR = "/tmp/hndwrt/training/i/"
TESTING_i_DIR = "/tmp/hndwrt/testing/i/"
j_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample046/"
TRAINING_j_DIR = "/tmp/hndwrt/training/j/"
TESTING_j_DIR = "/tmp/hndwrt/testing/j/"
k_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample047/"
TRAINING_k_DIR = "/tmp/hndwrt/training/k/"
TESTING_k_DIR = "/tmp/hndwrt/testing/k/"
l_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample048/"
TRAINING_l_DIR = "/tmp/hndwrt/training/l/"
TESTING_l_DIR = "/tmp/hndwrt/testing/l/"
m_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample049/"
TRAINING_m_DIR = "/tmp/hndwrt/training/m/"
TESTING_m_DIR = "/tmp/hndwrt/testing/m/"
n_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample050/"
TRAINING_n_DIR = "/tmp/hndwrt/training/n/"
TESTING_n_DIR = "/tmp/hndwrt/testing/n/"
o_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample051/"
TRAINING_o_DIR = "/tmp/hndwrt/training/o/"
TESTING_o_DIR = "/tmp/hndwrt/testing/o/"
p_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample052/"
TRAINING_p_DIR = "/tmp/hndwrt/training/p/"
TESTING_p_DIR = "/tmp/hndwrt/testing/p/"
q_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample053/"
TRAINING_q_DIR = "/tmp/hndwrt/training/q/"
TESTING_q_DIR = "/tmp/hndwrt/testing/q/"
r_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample054/"
TRAINING_r_DIR = "/tmp/hndwrt/training/r/"
TESTING_r_DIR = "/tmp/hndwrt/testing/r/"
s_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample055/"
TRAINING_s_DIR = "/tmp/hndwrt/training/s/"
TESTING_s_DIR = "/tmp/hndwrt/testing/s/"
t_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample056/"
TRAINING_t_DIR = "/tmp/hndwrt/training/t/"
TESTING_t_DIR = "/tmp/hndwrt/testing/t/"
u_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample057/"
TRAINING_u_DIR = "/tmp/hndwrt/training/u/"
TESTING_u_DIR = "/tmp/hndwrt/testing/u/"
v_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample058/"
TRAINING_v_DIR = "/tmp/hndwrt/training/v/"
TESTING_v_DIR = "/tmp/hndwrt/testing/v/"
w_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample059/"
TRAINING_w_DIR = "/tmp/hndwrt/training/w/"
TESTING_w_DIR = "/tmp/hndwrt/testing/w/"
x_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample060/"
TRAINING_x_DIR = "/tmp/hndwrt/training/x/"
TESTING_x_DIR = "/tmp/hndwrt/testing/x/"
y_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample061/"
TRAINING_y_DIR = "/tmp/hndwrt/training/y/"
TESTING_y_DIR = "/tmp/hndwrt/testing/y/"
z_SOURCE_DIR = "/tmp/train/English/Hnd/Img/Sample062/"
TRAINING_z_DIR = "/tmp/hndwrt/training/z/"
TESTING_z_DIR = "/tmp/hndwrt/testing/z/"
split_size = .7
split_data(A_SOURCE_DIR, TRAINING_A_DIR, TESTING_A_DIR, split_size)
split_data(B_SOURCE_DIR, TRAINING_B_DIR, TESTING_B_DIR, split_size)
split_data(C_SOURCE_DIR, TRAINING_C_DIR, TESTING_C_DIR, split_size)
split_data(D_SOURCE_DIR, TRAINING_D_DIR, TESTING_D_DIR, split_size)
split_data(E_SOURCE_DIR, TRAINING_E_DIR, TESTING_E_DIR, split_size)
split_data(F_SOURCE_DIR, TRAINING_F_DIR, TESTING_F_DIR, split_size)
split_data(G_SOURCE_DIR, TRAINING_G_DIR, TESTING_G_DIR, split_size)
split_data(H_SOURCE_DIR, TRAINING_H_DIR, TESTING_H_DIR, split_size)
split_data(I_SOURCE_DIR, TRAINING_I_DIR, TESTING_I_DIR, split_size)
split_data(J_SOURCE_DIR, TRAINING_J_DIR, TESTING_J_DIR, split_size)
split_data(K_SOURCE_DIR, TRAINING_K_DIR, TESTING_K_DIR, split_size)
split_data(L_SOURCE_DIR, TRAINING_L_DIR, TESTING_L_DIR, split_size)
split_data(M_SOURCE_DIR, TRAINING_M_DIR, TESTING_M_DIR, split_size)
split_data(N_SOURCE_DIR, TRAINING_N_DIR, TESTING_N_DIR, split_size)
split_data(O_SOURCE_DIR, TRAINING_O_DIR, TESTING_O_DIR, split_size)
split_data(P_SOURCE_DIR, TRAINING_P_DIR, TESTING_P_DIR, split_size)
split_data(Q_SOURCE_DIR, TRAINING_Q_DIR, TESTING_Q_DIR, split_size)
split_data(R_SOURCE_DIR, TRAINING_R_DIR, TESTING_R_DIR, split_size)
split_data(S_SOURCE_DIR, TRAINING_S_DIR, TESTING_S_DIR, split_size)
split_data(T_SOURCE_DIR, TRAINING_T_DIR, TESTING_T_DIR, split_size)
split_data(U_SOURCE_DIR, TRAINING_U_DIR, TESTING_U_DIR, split_size)
split_data(V_SOURCE_DIR, TRAINING_V_DIR, TESTING_V_DIR, split_size)
split_data(W_SOURCE_DIR, TRAINING_W_DIR, TESTING_W_DIR, split_size)
split_data(X_SOURCE_DIR, TRAINING_X_DIR, TESTING_X_DIR, split_size)
split_data(Y_SOURCE_DIR, TRAINING_Y_DIR, TESTING_Y_DIR, split_size)
split_data(Z_SOURCE_DIR, TRAINING_Z_DIR, TESTING_Z_DIR, split_size)
split_data(a_SOURCE_DIR, TRAINING_a_DIR, TESTING_a_DIR, split_size)
split_data(b_SOURCE_DIR, TRAINING_b_DIR, TESTING_b_DIR, split_size)
split_data(c_SOURCE_DIR, TRAINING_c_DIR, TESTING_c_DIR, split_size)
split_data(d_SOURCE_DIR, TRAINING_d_DIR, TESTING_d_DIR, split_size)
split_data(e_SOURCE_DIR, TRAINING_e_DIR, TESTING_e_DIR, split_size)
split_data(f_SOURCE_DIR, TRAINING_f_DIR, TESTING_f_DIR, split_size)
split_data(g_SOURCE_DIR, TRAINING_g_DIR, TESTING_g_DIR, split_size)
split_data(h_SOURCE_DIR, TRAINING_h_DIR, TESTING_h_DIR, split_size)
split_data(i_SOURCE_DIR, TRAINING_i_DIR, TESTING_i_DIR, split_size)
split_data(j_SOURCE_DIR, TRAINING_j_DIR, TESTING_j_DIR, split_size)
split_data(k_SOURCE_DIR, TRAINING_k_DIR, TESTING_k_DIR, split_size)
split_data(l_SOURCE_DIR, TRAINING_l_DIR, TESTING_l_DIR, split_size)
split_data(m_SOURCE_DIR, TRAINING_m_DIR, TESTING_m_DIR, split_size)
split_data(n_SOURCE_DIR, TRAINING_n_DIR, TESTING_n_DIR, split_size)
split_data(o_SOURCE_DIR, TRAINING_o_DIR, TESTING_o_DIR, split_size)
split_data(p_SOURCE_DIR, TRAINING_p_DIR, TESTING_p_DIR, split_size)
split_data(q_SOURCE_DIR, TRAINING_q_DIR, TESTING_q_DIR, split_size)
split_data(r_SOURCE_DIR, TRAINING_r_DIR, TESTING_r_DIR, split_size)
split_data(s_SOURCE_DIR, TRAINING_s_DIR, TESTING_s_DIR, split_size)
split_data(t_SOURCE_DIR, TRAINING_t_DIR, TESTING_t_DIR, split_size)
split_data(u_SOURCE_DIR, TRAINING_u_DIR, TESTING_u_DIR, split_size)
split_data(v_SOURCE_DIR, TRAINING_v_DIR, TESTING_v_DIR, split_size)
split_data(w_SOURCE_DIR, TRAINING_w_DIR, TESTING_w_DIR, split_size)
split_data(x_SOURCE_DIR, TRAINING_x_DIR, TESTING_x_DIR, split_size)
split_data(y_SOURCE_DIR, TRAINING_y_DIR, TESTING_y_DIR, split_size)
split_data(z_SOURCE_DIR, TRAINING_z_DIR, TESTING_z_DIR, split_size)

TRAINING_DIR = "/tmp/hndwrt/training/"
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    rotation_range=40,
    shear_range=0.2,
    zoom_range=0.2,
    fill_mode='nearest')
train_generator = train_datagen.flow_from_directory(TRAINING_DIR,
                                                    batch_size=100,
                                                    class_mode='binary',
                                                    target_size=(150, 150))

VALIDATION_DIR = "/tmp/hndwrt/testing/"
validation_datagen = ImageDataGenerator(rescale=1.0/255.)
validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,
                                                              batch_size=100,
                                                              class_mode='binary',
                                                              target_size=(150, 150))

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(52, activation=tf.nn.softmax)
])
model.compile(optimizer = tf.train.AdamOptimizer(),
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('acc')>0.95):
      print("\nReached 95% accuracy so cancelling training!")
      self.model.stop_training = True
callbacks = myCallback()
history = model.fit_generator(train_generator,
                              epochs=50,
                              verbose=1,
                              validation_data=validation_generator,
                              callbacks=[callbacks])
model.save_weights("model.h5")

model.save_weights("model1.h5")

from keras.preprocessing import image
from keras.models import load_model
img = image.load_img("/7_img.jpg",target_size=(150,150))
print(img.size)
img  = image.img_to_array(img)
img = np.expand_dims(img,axis=0)
res = model.predict(img)
res = np.where(res == np.amax(res))
print(chr(res[1][0]+65+6))

import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'r', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

"""**For Help**"""

!rm -rf '/tmp/aug'

import matplotlib.pyplot as plt
f, axarr = plt.subplots(3,4)
FIRST_IMAGE=0
SECOND_IMAGE=7
THIRD_IMAGE=26
CONVOLUTION_NUMBER = 1
from tensorflow.keras import models
layer_outputs = [layer.output for layer in model.layers]
activation_model = tf.keras.models.Model(inputs = model.input, outputs = layer_outputs)
for x in range(0,4):
  f1 = activation_model.predict(test_images[FIRST_IMAGE].reshape(1, 28, 28, 1))[x]
  axarr[0,x].imshow(f1[0, : , :, CONVOLUTION_NUMBER], cmap='inferno')
  axarr[0,x].grid(False)
  f2 = activation_model.predict(test_images[SECOND_IMAGE].reshape(1, 28, 28, 1))[x]
  axarr[1,x].imshow(f2[0, : , :, CONVOLUTION_NUMBER], cmap='inferno')
  axarr[1,x].grid(False)
  f3 = activation_model.predict(test_images[THIRD_IMAGE].reshape(1, 28, 28, 1))[x]
  axarr[2,x].imshow(f3[0, : , :, CONVOLUTION_NUMBER], cmap='inferno')
  axarr[2,x].grid(False)

from numpy import expand_dims
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import ImageDataGenerator
from matplotlib import pyplot
from google.colab.patches import cv2_imshow
# load the image
img = load_img('/img041-003.jpg')
img = img.convert('RGB')

# convert to numpy array
data = img_to_array(img)

# expand dimension to one sample
samples = expand_dims(data, 0)

# prepare iterator
it = train_datagen.flow(samples, batch_size=1)
# generate samples and plot
for i in range(9):
	# define subplot
  pyplot.subplot(330 + 1 + i)
	# generate batch of images
  batch = it.next()
	# convert to unsigned integers for viewing
  image = batch[0].astype('uint8')
  cv2_imshow(image)
	# plot raw pixel data
  pyplot.imshow(image)

# show the figure
pyplot.show()

!zip -r /content/file.zip /tmp/aug

num = 11
m=0
let = "A" #chr(ord(ch) + 1)
print(ord(let))
for i in range(52):
  if i==26:
    m=6
  a = 'split_data('+chr(ord(let) + m +i)+'_SOURCE_DIR, TRAINING_'+chr(ord(let) + m +i)+'_DIR, TESTING_'+chr(ord(let) + m +i)+'_DIR, split_size)'
  print(a)